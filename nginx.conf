
# check the password against the mirte user password.
# Requires nginx reload on password change!
map $arg_password $accepted {
    default 0;
    "supersecurepassword" 1; # dev password, remove when it's working great
    include /root/file.conf; # store password over there in format: "password" 1;
}

# check that the client is 'internal' or external to require login or not.
map $remote_addr $internal {
    hostnames; # enables .* in ips
    default 0;
    # 192.168.2.* 1;
    192.168.43.* 1;
    192.168.42.* 1;
    192.168.137.* 1;
}

# combine the two checks into a single check
map $accepted$internal $requireLogin {
    00 1; # not logged in, external
    01 0; # not logged in and internal
    10 0; # logged in and external
    11 0; # logged in and internal
}

server {

    gzip_min_length 1000;
    gzip_buffers 4 8k;
    gzip_http_version 1.0;
    gzip_disable "msie6";
    gzip_types text/plain text/css application/javascript;
    gzip_vary on;
    gzip on;
    gzip_proxied any;

    # The NodeJs (Vue) webserver
    location / {
        if ($requireLogin = 1) {
            return 302 /login/?target=$request_uri; # temporary redirect
        }
        proxy_pass http://localhost:3000/;
    }

    # The ROS video server
    location /ros-video/ {
        if ($requireLogin = 1) {
            return 302 /login/?target=$request_uri; # temporary redirect
        }
        proxy_pass http://localhost:8181/;
        sub_filter "/snapshot" "/ros-video/snapshot"; # convert all /snapshot... texts(url) to /ros-video/snapshot...
        sub_filter "/stream" "/ros-video/stream"; # convert /stream... urls to /ros-video/stream... Used for the stream_viewer page and actual stream.
        sub_filter_once off;
        sub_filter_types "*";
    }

    # Jupyter Notebook
    location /jupyter/ {
        if ($requireLogin = 1) {
            return 302 /login/?target=$request_uri; # temporary redirect
        }
        proxy_pass http://localhost:8888/jupyter/;
    }

    # Wifi Connect
    location /wifi-connect/ {
        if ($requireLogin = 1) {
            return 302 /login/?target=$request_uri; # temporary redirect
        }
        # Wifi connect does not map to localhost
        proxy_pass http://192.168.42.1:8080/;
    }

    # Sphinx RTD Docs
    location /docs/ {
        # TODO: do we need login for this?
        # TODO: docs compilation is broken?
        include /etc/nginx/mime.types;
        alias /usr/local/src/mirte/mirte-documentation/_build/html/;
    }

    # ROS bridge websocket
    location /ws/ros {
        if ($requireLogin = 1) {
            return 302 /login/?target=$request_uri; # temporary redirect
        }
        proxy_pass http://localhost:9090;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $http_host;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }

    # Shell websocket
    location /ws/shell {
        if ($requireLogin = 1) {
            return 302 /login/?target=$request_uri; # temporary redirect
        }
        proxy_pass http://localhost:3000/shell;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $http_host;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }

    # Linetrace
    location /ws/linetrace {
        if ($requireLogin = 1) {
            return 302 /login/?target=$request_uri; # temporary redirect
        }
        proxy_pass http://localhost:8001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $http_host;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }

    # mDNS client discovery
    location /ws/clients {
        if ($requireLogin = 1) {
            return 302 /login/?target=$request_uri; # temporary redirect
        }
        proxy_pass http://localhost:4567;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $http_host;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }

    # Login system:
    # Show the login page when not logged in and required to login, otherwise redirect somewhere else

    location /login/ {
        if ($arg_target = '') {
            set $arg_target '/';
        }
        if ($requireLogin = 0) {
            return 302 $arg_target; # temporary redirect to the target url parameter
        }
        alias /usr/local/src/mirte/mirte-install-scripts/login/;
    }

    location /logout/ {
        # remove the password cookie(expire/set to empty) and redirect to main site. Might redirect the client back to /login/
        add_header Set-Cookie "password=empty; path=/; Domain=$host; expires=Thu, 01 Jan 1970 00:00:00 GMT;" always;
        return 302 /;
    }

    # VSCode system:
    # /code/ will redirect(when logged in) to :8000 as vscode won't work nicely in a folder
    # Before using it, the terms must be accepted, otherwise nginx will redirect the client to /code/accept/
    #
    location /code/ {
        if ($requireLogin = 1) {
            return 302 /login/?target=$request_uri; # temporary redirect
        }
        return 302 http://$host:8000/; # that is defined lower
    }
    location /code/accept/ {
        if ($requireLogin = 1) {
            return 302 /login/?target=$request_uri; # temporary redirect
        }
        alias /www/vscode/;
    }

}

# VSCode server:
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}
map $cookie_codeAccepted $requireAccept {
    default 1;
    accept 0;
}
server {
    listen *:8000; # vscode does not work in a folder
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header X-Forwarded-Host $http_host;
    proxy_read_timeout 86400s;
    proxy_send_timeout 86400s;
    location / {
        if ($requireLogin = 1) {
            return 302 http://$host/login/?target=/code/; # temporary redirect, /code/ will redirect back to :8000/
        }
        if ($requireAccept = 1) {
            return 302 http://$host/code/accept/;
        }
        proxy_pass http://127.0.0.1:9000/;
    }
}